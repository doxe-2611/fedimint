searchState.loadedDescShard("fedimint_testing", 0, "Waits till tx is found in mempool and returns the fees\nReturns a new address.\nReturns the block height for the txid if found.\nMake the underlying instance act as if it was exclusively …\nMine a block to include any pending transactions then get …\nMines a given number of blocks\nPrepare funding wallet\nSend some bitcoin to an address then mine a block to …\nTracks how much bitcoin was sent to an address (doesn’t …\nSimulates mined bitcoin blocks\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSimulates pending transactions in the mempool\nSimulates the merkle tree proofs\nRegisters a fake bitcoin rpc factory for testing\nSimulates the script history\nTracks the block height a transaction was included\nGlobal lock we use to isolate tests that need exclusive …\nFixture implementing bitcoin node under test by talking to …\nFixture implementing bitcoin node under test by talking to …\nFixture implementing bitcoin node under test by talking to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRPC used to connect to bitcoind, used for waiting for the …\nHelper function that recursively copies all contents from …\nCreates a backup database in the <code>snapshot_dir</code> according to …\nGet the project root (relative to closest Cargo.lock file)\nRetrieves a temporary database from the database backup …\nOpens the backup database in the <code>snapshot_dir</code>. If the …\nOpen a temporary database located at <code>temp_path</code> and copy …\nCreates the database backup directory for a server module …\nCreate the database backup directory for a client module. …\nCreates the database backup for <code>snapshot_name</code> to …\nValidates the database migrations for a client module. …\nValidates the database migrations. <code>decoders</code> need to be …\nValidates the database migrations for a server module. …\nTest fixture for a running fedimint federation\nBuilder struct for creating a <code>FederationTest</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the federation id\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn first invite code for gateways\nCreates the config gen params for each peer\nCreate a new admin client connected to this fed\nCreate a client connected to this fed\nCreate a client connected to this fed but using RocksDB …\nCreate two clients, useful for send/receive tests\nA tool for easily writing fedimint integration tests\nA default timeout for things happening in tests\nGet a test bitcoin fixture\nGet a client bitcoin RPC config\nGet a server bitcoin RPC config\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStarts a new federation with default number of peers for …\nStarts a new gateway with a given lightning node\nIf <code>FM_TEST_DIR</code> is set, use it as a base, otherwise use a …\nAdd a module to the fed\nFixture for creating a gateway\nTemporary dir that stores the gateway config\nConnects to a new federation and stores the info\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle of the running gateway\nRPC client for communicating with the gateway admin API\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>TaskGroup</code> that is running the test\nURL for the RPC\nWaits for the webserver to be ready.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates an invoice that is not payable")