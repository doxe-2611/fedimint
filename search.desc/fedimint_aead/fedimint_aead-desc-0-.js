searchState.loadedDescShard("fedimint_aead", 0, "The additionally authenticated data (AAD) for an opening …\nImmutable keys for use in situations where <code>OpeningKey</code>/…\nAll the AEADs we support use 96-bit nonces.\nAn AEAD key without a designated role or nonce sequence.\nThe key’s AEAD algorithm.\nThe key’s AEAD algorithm.\nConstructs Argon2 with default params, easier if the weak …\nDecrypts a <code>ciphertext</code> using <code>key</code>.\nConstruct an empty <code>Aad</code>.\nEncrypt <code>plaintext</code> using <code>key</code>.\nReads encrypted data from a file\nWrite <code>data</code> encrypted to a <code>file</code> with a random <code>nonce</code> that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct the <code>Aad</code> from the given bytes.\nReturns the argument unchanged.\nKey used to encrypt and authenticate data stored on the …\nGet a random nonce.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a <code>UnboundKey</code>.\nConstructs a <code>LessSafeKey</code>.\nLike <code>super::OpeningKey::open_in_place()</code>, except it accepts …\nLike open_in_place, except the authentication tag is …\nLike <code>super::OpeningKey::open_within()</code>, except it accepts an\nGenerates a B64-encoded random salt string of the …\nLike <code>super::SealingKey::seal_in_place_append_tag()</code>, except …\nLike <code>super::SealingKey::seal_in_place_separate_tag()</code>, …")