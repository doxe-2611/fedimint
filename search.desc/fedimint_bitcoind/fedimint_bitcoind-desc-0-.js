searchState.loadedDescShard("fedimint_bitcoind", 0, "Global factories for creating bitcoin RPCs\nContains the error value\nTrait that allows interacting with the Bitcoin blockchain\nTrait for creating new bitcoin RPC clients\nContains the success value\n<code>Result&lt;T, Error&gt;</code>\nWrapper around <code>IBitcoindRpc</code> that will retry failed calls\nCreate a bitcoin RPC of a given kind\nCreates a new bitcoin RPC client connection\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the current block count\nReturns the block hash at a given height\nEstimates the fee rate for a given confirmation target. …\nReturns the Bitcoin network the node is connected to\nGet script transaction history\nIf a transaction is included in a block, returns the block …\nReturns a proof that a tx is included in the bitcoin …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a transaction is included in a block\nRegister a new factory for creating bitcoin RPCs\nRetries with an exponential backoff from <code>RETRY_SLEEP_MIN_MS</code>…\nSubmits a transaction to the Bitcoin network\nWatches for a script and returns any transactions …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParses errors from electrum-client to determine if the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")