searchState.loadedDescShard("fedimint_lnv2_client", 0, "A two hour buffer in case either the client or gateway go …\nThe payment was successful.\nThe payment was successful.\nThe gateway has funded the incoming contract.\nNumber of blocks until outgoing lightning contracts times …\nContains the error value\nContains the error value\nThe incoming contract has expired.\nThe incoming contract has expired.\nEither a programming error has occurred or the federation …\nEither a programming error has occurred or the federation …\nEither a programming error has occurred or the federation …\nEither a programming error has occurred or the federation …\nWe are waiting for the gateway to complete the payment.\nWe are funding the outgoing contract.\nClient side lightning module\nContains the success value\nContains the success value\nWe are waititng for the gateway to fund the incoming …\nThis is the maximum receive fee of half of one percent …\nThe high-level state of receiving a payment over lightning.\nThe outgoing contract has been refunded.\nThe outgoing contract has been refunded.\nThe payment has failed. We are refunding the outgoing …\nThis is the maximum send fee of one and a half percent …\nThe high-level state of sending a payment over lightning.\nThe payment was successful.\nThe payment was successful.\nAwait the final state of the receive operation.\nAwait the final state of the send operation.\nCreate an incoming contract locked to a public key derived …\nThis is the default total expiration the gateway …\nThis is the minimum expiration delta in block the gateway …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalculate the absolute fee paid to the gateway on success.\nCalculate the absolute fee paid to the gateway on success.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe public key of the gateways lightning node. Since this …\nThe public key of the gateways client module. This key is …\nRequest an invoice. For testing you can optionally specify …\nThis is the fee the gateway charges for an incoming …\nPay an invoice. For  testing  you can optionally specify a …\nThis is the default total fee the gateway recommends for …\nThis is the fee the gateway charges for an outgoing …\nSubscribe to all updates of the receive operation.\nSubscribe to all updates of the send operation.\nThis method updates the mapping from lightning node public …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAdd a vetted gateway.\nAwait the final state of the receive operation.\nAwait the final state of the send operation.\nGateway subcommands\nList all vetted gateways.\nRequest an invoice. For testing you can optionally specify …\nRemove a vetted gateway.\nSelect an online vetted gateway; this command is intended …\nPay an invoice. For  testing  you can optionally specify a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")