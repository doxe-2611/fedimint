searchState.loadedDescShard("fedimint_lnv2_client", 0, "A two hour buffer in case either the client or gateway go …\nThe payment has been successful.\nThe payment has been successful.\nThe payment has been confirmed and we are issuing the …\nNumber of blocks until outgoing lightning contracts times …\nContains the error value\nContains the error value\nThe payment request has expired.\nThe payment request has expired.\nEither a programming error has occurred or the federation …\nEither a programming error has occurred or the federation …\nEither a programming error has occurred or the federation …\nEither a programming error has occurred or the federation …\nThe final state of an operation receiving a payment over …\nThe final state of an operation sending a payment over …\nWe are waiting for the gateway to complete the payment.\nWe are funding the contract to incentivize the gateway.\nContains the success value\nContains the success value\nWe are waiting for the payment.\nThe state of an operation receiving a payment over …\nThe payment has been refunded.\nThe payment has been refunded.\nThe payment has failed and we are refunding the contract.\nThe state of an operation sending a payment over lightning.\nThe payment was successful.\nThe payment was successful.\nAwait the final state of the receive operation.\nAwait the final state of the send operation.\nCreate an incoming contract locked to a public key derived …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalculate the absolute fee paid to the gateway on success.\nCalculate the absolute fee paid to the gateway on success.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRequest an invoice. For testing you can optionally specify …\nPay an invoice. For testing you can optionally specify a …\nSubscribe to all state updates of the receive operation.\nSubscribe to all state updates of the send operation.\nUpdates the mapping from lightning node public keys to …\nAdd a vetted gateway.\nAwait the final state of the receive operation.\nAwait the final state of the send operation.\nUpdate cache of gateway information to optimise gateway …\nGateway subcommands\nList all vetted gateways.\nRequest an invoice. For testing you can optionally specify …\nRemove a vetted gateway.\nSelect an online vetted gateway; this command is intended …\nPay an invoice. For  testing  you can optionally specify a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")