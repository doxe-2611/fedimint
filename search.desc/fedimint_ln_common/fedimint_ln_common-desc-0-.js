searchState.loadedDescShard("fedimint_ln_common", 0, "Lightning Module\nAllow early refund of outgoing contract\nFund contract\nInformation a gateway registers with a federation\nInformation about a gateway that is shared with other …\nInformation about a gateway that is stored locally and …\nRepresents an output of the Lightning module.\nCreate incoming contract offer\nData needed to pay an invoice\nRequest sent to the federation that requests the removal …\nWhile for now we only support spending the entire contract …\nCreate a registration from this announcement that is …\nURL to the gateway’s versioned public API (e.g. …\nCreates a message to be signed by the Gateway’s private …\nWire-format encoding of feature bit vector\nTime at which the invoice expires in seconds since unix …\nUnique per-federation identifier assigned by the gateway. …\nGateway configured routing fees\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nKey used to pay the gateway\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHack to get a route hint that implements <code>serde</code> traits.\nRoute hints to reach the LN node of the gateway.\nIndicates if the gateway supports private payments\nLimits the validity of the announcement to allow updates, …\nCreate an announcement from this registration that is …\nLimits the validity of the announcement to allow updates, …\nIndicates if this announcement has been vetted by the …\nIndicates if this announcement has been vetted by the …\nOf the three contract types only the outgoing one needs …\nContract to update\nSignature of gateway\nMainnet Bitcoin.\nTrait for converting a fee type to specific <code>Amount</code>, …\nGateway routing fees\nThe cryptocurrency network to act on.\nBitcoin’s regtest network.\nBitcoin’s signet network.\nBitcoin’s testnet network. (In future versions this will …\nBitcoin’s testnet4 network. (In future versions this …\nConfigures which bitcoin RPC to use\nReturn the network’s chain hash (genesis block hash).\nFees charged for LN transactions\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Network</code> from the chain hash (genesis block hash).\nConverts a <code>bitcoind -chain</code> argument name to its equivalent …\nCreates a <code>Network</code> from the magic bytes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the network magic bytes, which should be encoded …\nReturns the associated network parameters.\nThe number of decryption shares required\nThe threshold public keys for encrypting the LN preimage\nOur secret key for decrypting preimages\nCalculates fee <code>Amount</code> given a payment <code>Amount</code>\nConverts a <code>Network</code> to its equivalent <code>bitcoind -chain</code> …\nA contract before execution as found in transaction outputs\nThe hash of a LN incoming contract\nOutcome of a contract. Only incoming contracts currently …\nPossible outcomes of preimage decryption\nCurrent status of preimage decryption\nThreshold-encrypted <code>Preimage</code>\nA contract after execution as saved in the database\nAnything representing a contract which thus has an …\nThe decrypted preimage was invalid\nThe decrypted preimage was invalid\nThere aren’t enough decryption shares yet\nThere aren’t enough decryption shares yet\nShare to decrypt an <code>EncryptedPreimage</code>\nThe decrypted preimage was valid\nThe decrypted preimage was valid\nReturns a reference to the inner hash (sha256, sh256d …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates this wrapper type from the inner hash type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts a contract to its executed version.\nCreates the initial contract outcome that is created on …\nCreate a Schnorr public key\nReturns the inner hash (sha256, sh256d etc.).\nThe funded version of an <code>IncomingContract</code> contains the …\nSpecialized smart contract for incoming payments\nThe hash of a LN incoming contract offer\nAmount for which the user is willing to sell the preimage\nReturns a reference to the inner hash (sha256, sh256d …\nStatus of preimage decryption, will either end in failure …\nEncrypted preimage as specified in offer\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates this wrapper type from the inner hash type.\nKey that can unlock contract in case the decrypted …\nPayment hash which’s corresponding preimage is being sold\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIncoming contracts are funded exactly once, so they have …\nReturns the inner hash (sha256, sh256d etc.).\nSpecialized smart contract for outgoing payments.\nFlag that can be set by the gateway and allows the client …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPublic key of the LN gateway allowed to claim the HTLC …\nHash that can be used to spend the output before the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBlock height at which the money will be spendable by the …\nPublic key of the user that can claim the money back after …\nA list of hops along a payment path terminating with a …\nFlat routing fee in millisatoshis\nThe difference in CLTV values between this node and the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe maximum value in msat available for routing with a …\nThe minimum value, in msat, which must be relayed to the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLiquidity-based routing fee in millionths of a routed …\nThe <code>short_channel_id</code> of this channel\nThe <code>node_id</code> of the non-target end of the route")