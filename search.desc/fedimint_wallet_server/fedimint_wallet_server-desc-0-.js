searchState.loadedDescShard("fedimint_wallet_server", 0, "A peg-out tx that is ready to be broadcast with a tweak …\nA PSBT that is awaiting enough signatures from the …\nQueries the database and returns all assets and …\nBlock count updated periodically by a background task\nThis module’s contribution to the next consensus proposal\nAttempts to create a tx ready to be signed from available …\nFee rate updated periodically by a background task\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRetrieve the current status of the output. Depending on …\nThis function is called once for every consensus item. The …\nTry to spend a transaction input. On success all necessary …\nTry to create an output (e.g. issue notes, peg-out BTC, …\nAdd a change UTXO to our spendable UTXO database after it …\nRemoves the <code>PendingTransaction</code> and any transactions tied …\nTry to attach signatures to a pending peg-out tx.\nGiven a tx created from an <code>WalletOutput</code>, validate there …\nAn iterator over the variants of DbKeyPrefix\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")